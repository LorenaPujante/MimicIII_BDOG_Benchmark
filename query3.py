
class Query3:

    def __init__(self, idsPat, dateStart, dateEnd):     #idsPat = (1, 2, 3)     #idsPat_nj4 = [1, 2, 3] 
        self.idsPat = idsPat
        self.dateStart = dateStart
        self.dateEnd = dateEnd
        self.idsPat_n4j = "[" + idsPat[1:-1] + "]"
        self.dateStart_n4j = dateStart + "Z"
        self.dateEnd_n4j = dateEnd + "Z"
        
        

    #########
    # NEO4J #
    #########
    def getQuery_neo4j(self):
        query = "WITH datetime(\"{}\") AS dateStart, datetime(\"{}\") AS dateEnd, {} AS idsPat\n".format(self.dateStart_n4j, self.dateEnd_n4j, self.idsPat_n4j)
        query += "MATCH path0 = (p:Patient)<-[:episodeFromPatient]-(:Episode)<-[:eventFromEpisode]-(ev:Event)\n"
        query += "WHERE p.id IN idsPat\n"
        query += "AND NOT ev:Death\n"
        query += "AND ((ev.start >= dateStart AND ev.end <= dateEnd)\n"
        query += "OR (ev.start <= dateStart AND ev.end >= dateStart)\n"
        query += "OR (ev.start <= dateEnd AND ev.end >= dateEnd))\n"
        query += "WITH collect({ev: ev, p: p, path: path0}) AS events\n"
        query += "UNWIND events AS pair1\n"
        query += "UNWIND events AS pair2\n"
        query += "WITH *,\n"
        query += "pair1.p AS p1, pair2.p AS p2,\n"
        query += "pair1.ev AS ev1, pair2.ev AS ev2\n"
        query += "WHERE id(p1) < id(p2)\n"
        query += "OPTIONAL MATCH path_testMicro = (ev1)-[:hasFound]->(:Microorganism)<-[:hasFound]-(ev2)\n"
        query += "OPTIONAL MATCH path_location_ev1 = (ev1)-[:hasLocation]-(s1:Seat)\n"
        query += "OPTIONAL MATCH path_location_ev2 = (ev2)-[:hasLocation]-(s2:Seat)\n"
        query += "OPTIONAL MATCH path_location_toArea = (s1)-[:placedIn*0..6]-(s2)\n"
        query += "OPTIONAL MATCH path_location_logicZone = (s1)-[:placedIn*3]->(:Area)<-[:hasArea]-(:LogicZone)-[:hasArea]->(:Area)<-[:placedIn*3]-(s2)\n"
        query += "OPTIONAL MATCH path_location_nextToRoom = (s1)-[:placedIn]->(:Room)-[:nextTo]-(:Room)<-[:placedIn]-(s2)\n"
        query += "WHERE NOT EXISTS ((s1)-[:placedIn*1..3]->(:Location)<-[:placedIn*1..3]-(s2))\n"
        query += "OPTIONAL MATCH path_hu = (ev1)-[:hasHospUnit]->(:HospitalizationUnit)<-[:hasHospUnit]-(ev2)\n"
        query += "OPTIONAL MATCH path_serv = (ev1)-[:hasHospUnit]->(:HospitalizationUnit)-[:hospUnitFromService]->(:Service)<-[:hospUnitFromService]-(:HospitalizationUnit)<-[:hasHospUnit]-(ev2)\n"
        query += "WITH *\n"
        query += "WHERE (path_testMicro IS NOT NULL)\n"
        query += "OR (path_location_toArea IS NOT NULL) OR (path_location_logicZone IS NOT NULL) OR (path_location_nextToRoom IS NOT NULL)\n"
        query += "OR (path_hu IS NOT NULL) OR (path_serv IS NOT NULL)\n"
        query += "RETURN p1, p2, last(nodes(pair1.path)) AS ev1, last(nodes(pair2.path)) AS ev2, pair1.path AS path0a, pair2.path AS path0b,\n"
        query += "path_testMicro,\n"
        query += "path_hu, path_serv,\n"
        query += "path_location_ev1, path_location_ev2, path_location_toArea, path_location_logicZone, path_location_nextToRoom"
        
        return query



    ##########
    # SPARQL #
    ##########
    def getQuery_sparql(self):
        query = "PREFIX ho: <http://www.semanticweb.org/spatiotemporalHospitalOntology#>\n"
        query += "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n"
        query += "PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n"
        query += "SELECT DISTINCT ?p ?p1 ?ep ?ev ?ep1 ?ev1 ?m ?huA ?bed ?bed1 ?room ?room1 ?nx ?area ?area1 ?lz ?pathToMiddleLoc ?pathToMiddleLoc2\n"
        query += "WHERE {\n"
        query += "{\n"
        query += "VALUES (?start ?end) {{(\"{}\"^^xsd:dateTime \"{}\"^^xsd:dateTime)}}\n".format(self.dateStart, self.dateEnd)
        query += "?p a ho:Patient;\n"
        query += "ho:id ?p_id;\n"
        query += "^(ho:episodeFromPatient) ?ep.\n"
        query += "?ev ho:eventFromEpisode ?ep;\n"
        query += "ho:start ?ev_start;\n"
        query += "ho:end ?ev_end.\n"
        query += "?p1 a ho:Patient;\n"
        query += "ho:id ?p1_id;\n"
        query += "^(ho:episodeFromPatient) ?ep1.\n"
        query += "?ev1 ho:eventFromEpisode ?ep1;\n"
        query += "ho:start ?ev1_start;\n"
        query += "ho:end ?ev1_end.\n"
        query += "?ev ho:hasLocation ?bed.\n"
        query += "?ev1 ho:hasLocation ?bed1.\n"
        query += "OPTIONAL {\n"
        query += "?bed1 (^(ho:placedIn1)/ho:placedIn2)* ?mid.\n"
        query += "?mid (^(ho:placedIn2)/ho:placedIn1)* ?bed.\n"
        query += "FILTER (!regex(str(?mid), \"http://www.semanticweb.org/spatiotemporalHospitalOntology#(Floor|Building)/.+\"))\n"
        query += "}\n"
        query += "OPTIONAL {\n"
        query += "?bed ^(ho:placedIn1)/ho:placedIn2 ?room.\n"
        query += "?bed1 ^(ho:placedIn1)/ho:placedIn2 ?room1.\n"
        query += "?nx (ho:nextTo1|ho:nextTo2) ?room.\n"
        query += "?nx (ho:nextTo1|ho:nextTo2) ?room1.\n"
        query += "OPTIONAL {?room (^ho:placedIn1/ho:placedIn2)+ ?area.\n"
        query += "?area a ho:Area.}\n"
        query += "OPTIONAL {?room1 (^ho:placedIn1/ho:placedIn2)+ ?area1.\n"
        query += "?area1 a ho:Area.}\n"
        query += "FILTER(?area1 != ?area  ||  (isBlank(?area1) && isBlank(?area)))\n"
        query += "}\n"
        query += "OPTIONAL {\n"
        query += "?bed1 (^(ho:placedIn1)/ho:placedIn2)+ ?area1.\n"
        query += "?area1 a ho:Area.\n"
        query += "?bed (^(ho:placedIn1)/ho:placedIn2)+ ?area.\n"
        query += "?area a ho:Area.\n"
        query += "?area1 ^(ho:hasArea2)/ho:hasArea1 ?lz.\n"
        query += "?area ^(ho:hasArea2)/ho:hasArea1 ?lz.\n"
        query += "FILTER (?area1 != ?area)\n"
        query += "}\n"
        query += "OPTIONAL {\n"
        query += "?ev1 ho:hasHospUnit ?huA.\n"
        query += "?ev ho:hasHospUnit ?huA.\n"
        query += "}\n"
        query += "FILTER(!isBlank(?mid)  ||  !isBlank(?nx) || !isBlank(?lz) || !isBlank(?huA))\n"
        query += "FILTER(?p_id in {})\n".format(self.idsPat)
        query += "FILTER(?p1_id in {})\n".format(self.idsPat)
        query += "FILTER(?p_id > ?p1_id)\n"
        query += "FILTER((?ev_start >= ?start && ?ev_end <= ?end)\n"
        query += "|| (?ev_start <= ?start && ?ev_end >= ?start)\n"
        query += "|| (?ev_start <= ?end && ?ev_end >= ?end))\n"
        query += "FILTER((?ev1_start >= ?start && ?ev1_end <= ?end)\n"
        query += "|| (?ev1_start <= ?start && ?ev1_end >= ?start)\n"
        query += "|| (?ev1_start <= ?end && ?ev1_end >= ?end))\n"
        query += "}\n"
        query += "UNION\n"
        query += "{\n"
        query += "VALUES (?start ?end) {{(\"{}\"^^xsd:dateTime \"{}\"^^xsd:dateTime)}}\n".format(self.dateStart, self.dateEnd)
        query += "?p a ho:Patient;\n"
        query += "ho:id ?p_id.\n"
        query += "?p ^(ho:episodeFromPatient)/^(ho:eventFromEpisode) ?ev.\n"
        query += "?ev a ho:TestMicro;\n"
        query += "ho:start ?tm_start.\n"
        query += "?p1 a ho:Patient;\n"
        query += "ho:id ?p1_id.\n"
        query += "?p1 ^(ho:episodeFromPatient)/^(ho:eventFromEpisode) ?ev1.\n"
        query += "?ev1 a ho:TestMicro;\n"
        query += "ho:start ?tm1_start.\n"
        query += "?ev ^(ho:hasFound1)/ho:hasFound2 ?m.\n"
        query += "?ev1 ^(ho:hasFound1)/ho:hasFound2 ?m.\n"
        query += "FILTER(?p_id in {})\n".format(self.idsPat)
        query += "FILTER(?p1_id in {})\n".format(self.idsPat)
        query += "FILTER(?p_id > ?p1_id)\n"
        query += "FILTER((?tm_start >= ?start) && (?tm_start <= ?end))\n"
        query += "FILTER((?tm1_start >= ?start) && (?tm1_start <= ?end))\n"
        query += "}\n"
        query += "UNION\n"
        query += "{\n"
        query += "SELECT ?bed ?bed1 (group_concat(DISTINCT ?mid; separator=\", \") AS ?pathToMiddleLoc) (group_concat(DISTINCT ?mid2; separator=\", \") AS ?pathToMiddleLoc2)\n"
        query += "{\n"
        query += "{\n"
        query += "SELECT DISTINCT ?bed ?bed1 {\n"
        query += "VALUES (?start ?end) {{(\"{}\"^^xsd:dateTime \"{}\"^^xsd:dateTime)}}\n".format(self.dateStart, self.dateEnd)
        query += "?p a ho:Patient;\n"
        query += "ho:id ?p_id.\n"
        query += "?p ^(ho:episodeFromPatient)/^(ho:eventFromEpisode) ?ev.\n"
        query += "?ev ho:start ?ev_start;\n"
        query += "ho:end ?ev_end;\n"
        query += "ho:hasLocation ?bed.\n"
        query += "?p1 a ho:Patient;\n"
        query += "ho:id ?p1_id.\n"
        query += "?p1 ^(ho:episodeFromPatient)/^(ho:eventFromEpisode) ?ev1.\n"
        query += "?ev1 ho:start ?ev1_start;\n"
        query += "ho:end ?ev1_end;\n"
        query += "ho:hasLocation ?bed1.\n"
        query += "FILTER(?p_id in {})\n".format(self.idsPat)
        query += "FILTER(?p1_id in {})\n".format(self.idsPat)
        query += "FILTER(?p_id > ?p1_id)\n"
        query += "FILTER((?ev_start >= ?start && ?ev_end <= ?end)\n"
        query += "|| (?ev_start <= ?start && ?ev_end >= ?start)\n"
        query += "|| (?ev_start <= ?end && ?ev_end >= ?end))\n"
        query += "FILTER((?ev1_start >= ?start && ?ev1_end <= ?end)\n"
        query += "|| (?ev1_start <= ?start && ?ev1_end >= ?start)\n"
        query += "|| (?ev1_start <= ?end && ?ev1_end >= ?end))\n"
        query += "}\n"
        query += "}\n"
        query += "?bed1 (^(ho:placedIn1)/ho:placedIn2)* ?mid.\n"
        query += "?mid (^(ho:placedIn1)/ho:placedIn2)* ?midAux.\n"
        query += "?midAux (^(ho:placedIn2)/ho:placedIn1)+ ?mid2.\n"
        query += "?mid2 (^(ho:placedIn2)/ho:placedIn1)* ?bed.\n"
        query += "FILTER (!regex(str(?mid), \"http://www.semanticweb.org/spatiotemporalHospitalOntology#(Floor|Building)/.+\"))\n"
        query += "FILTER (!regex(str(?midAux), \"http://www.semanticweb.org/spatiotemporalHospitalOntology#(Floor|Building)/.+\"))\n"
        query += "} GROUP BY ?bed ?bed1\n"
        query += "}\n"
        query += "}"

        return query



    ###############
    # SPARQL-STAR #
    ###############
    def getQuery_sparqlStar(self):
        query = "PREFIX ho: <http://www.semanticweb.org/spatiotemporalHospitalOntology#>\n"
        query += "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n"
        query += "PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n"
        query += "SELECT DISTINCT ?p ?p1 ?ev ?ev1 ?relNX1 ?relNX2 ?lz ?m ?huA ?bed ?bed1 ?pathToMiddleLoc ?pathToMiddleLoc2\n"
        query += "WHERE {\n"
        query += "{\n"
        query += "VALUES (?start ?end) {{(\"{}\"^^xsd:dateTime \"{}\"^^xsd:dateTime)}}\n".format(self.dateStart, self.dateEnd)
        query += "?p a ho:Patient;\n"
        query += "ho:id ?p_id.\n"
        query += "?p ^(ho:episodeFromPatient)/^(ho:eventFromEpisode) ?ev.\n"
        query += "?ev ho:start ?ev_start;\n"
        query += "ho:end ?ev_end.\n"
        query += "?p1 a ho:Patient;\n"
        query += "ho:id ?p1_id.\n"
        query += "?p1 ^(ho:episodeFromPatient)/^(ho:eventFromEpisode) ?ev1.\n"
        query += "?ev1 ho:start ?ev1_start;\n"
        query += "ho:end ?ev1_end.\n"
        query += "?ev ho:hasLocation ?bed.\n"
        query += "?ev1 ho:hasLocation ?bed1.\n"
        query += "OPTIONAL {\n"
        query += "?bed1 ho:placedIn* ?mid.\n"
        query += "?mid (^ho:placedIn)* ?bed.\n"
        query += "FILTER (!regex(str(?mid), \"http://www.semanticweb.org/spatiotemporalHospitalOntology#(Floor|Building)/.+\"))\n"
        query += "}\n"
        query += "OPTIONAL {\n"
        query += "?bed ho:placedIn ?room.\n"
        query += "?bed1 ho:placedIn ?room1.\n"
        query += "OPTIONAL {?room ?relNX1 ?room1.\n"
        query += "FILTER((str(?relNX1) = \"http://www.semanticweb.org/spatiotemporalHospitalOntology#nextTo\"))}\n"
        query += "OPTIONAL {?room1 ?relNX2 ?room.\n"
        query += "FILTER((str(?relNX2) = \"http://www.semanticweb.org/spatiotemporalHospitalOntology#nextTo\"))}\n"
        query += "OPTIONAL {?room1 ho:placedIn+ ?area1.\n"
        query += "?area1 a ho:Area.}\n"
        query += "OPTIONAL {?room (ho:placedIn)+ ?area.\n"
        query += "?area a ho:Area.}\n"
        query += "FILTER(?area1 != ?area  ||  (isBlank(?area1) && isBlank(?area)))\n"
        query += "}\n"
        query += "OPTIONAL {\n"
        query += "?room1 ho:placedIn+ ?area1.\n"
        query += "?area1 a ho:Area.\n"
        query += "?room ho:placedIn+ ?area.\n"
        query += "?area a ho:Area.\n"
        query += "?area1 ^ho:hasArea ?lz.\n"
        query += "?area ^ho:hasArea ?lz.\n"
        query += "FILTER(?area1 != ?area)\n"
        query += "}\n"
        query += "OPTIONAL {\n"
        query += "?ev1 ho:hasHospUnit ?huA.\n"
        query += "?ev ho:hasHospUnit ?huA.\n"
        query += "}\n"
        query += "FILTER(!isBlank(?mid)  ||  !isBlank(?relNX1) || !isBlank(?relNX2) || !isBlank(?lz) || !isBlank(?huA))\n"
        query += "FILTER(?p_id in {})\n".format(self.idsPat)
        query += "FILTER(?p1_id in {})\n".format(self.idsPat)
        query += "FILTER(?p_id > ?p1_id)\n"
        query += "FILTER((?ev_start >= ?start && ?ev_end <= ?end)\n"
        query += "|| (?ev_start <= ?start && ?ev_end >= ?start)\n"
        query += "|| (?ev_start <= ?end && ?ev_end >= ?end))\n"
        query += "FILTER((?ev1_start >= ?start && ?ev1_end <= ?end)\n"
        query += "|| (?ev1_start <= ?start && ?ev1_end >= ?start)\n"
        query += "|| (?ev1_start <= ?end && ?ev1_end >= ?end))\n"
        query += "}\n"
        query += "UNION\n"
        query += "{\n"
        query += "VALUES (?start ?end) {{(\"{}\"^^xsd:dateTime \"{}\"^^xsd:dateTime)}}\n".format(self.dateStart, self.dateEnd)
        query += "?p a ho:Patient;\n"
        query += "ho:id ?p_id.\n"
        query += "?p ^(ho:episodeFromPatient)/^(ho:eventFromEpisode) ?ev.\n"
        query += "?ev a ho:TestMicro;\n"
        query += "ho:start ?tm_start.\n"
        query += "?p1 a ho:Patient;\n"
        query += "ho:id ?p1_id.\n"
        query += "?p1 ^(ho:episodeFromPatient)/^(ho:eventFromEpisode) ?ev1.\n"
        query += "?ev1 a ho:TestMicro;\n"
        query += "ho:start ?tm1_start.\n"
        query += "?ev ho:hasFound ?m.\n"
        query += "?ev1 ho:hasFound ?m.\n"
        query += "FILTER(?p_id in {})\n".format(self.idsPat)
        query += "FILTER(?p1_id in {})\n".format(self.idsPat)
        query += "FILTER(?p_id > ?p1_id)\n"
        query += "FILTER((?tm_start >= ?start) && (?tm_start <= ?end))\n"
        query += "FILTER((?tm1_start >= ?start) && (?tm1_start <= ?end))\n"
        query += "}\n"
        query += "UNION\n"
        query += "{\n"
        query += "SELECT ?bed ?bed1 (group_concat(DISTINCT ?mid; separator=\", \") AS ?pathToMiddleLoc) (group_concat(DISTINCT ?mid2; separator=\", \") AS ?pathToMiddleLoc2)\n"
        query += "{\n"
        query += "{\n"
        query += "SELECT DISTINCT ?bed ?bed1 {\n"
        query += "VALUES (?start ?end) {{(\"{}\"^^xsd:dateTime \"{}\"^^xsd:dateTime)}}\n".format(self.dateStart, self.dateEnd)
        query += "?p a ho:Patient;\n"
        query += "ho:id ?p_id.\n"
        query += "?p ^(ho:episodeFromPatient)/^(ho:eventFromEpisode) ?ev.\n"
        query += "?ev ho:start ?ev_start;\n"
        query += "ho:end ?ev_end;\n"
        query += "ho:hasLocation ?bed.\n"
        query += "?p1 a ho:Patient;\n"
        query += "ho:id ?p1_id.\n"
        query += "?p1 ^(ho:episodeFromPatient)/^(ho:eventFromEpisode) ?ev1.\n"
        query += "?ev1 ho:start ?ev1_start;\n"
        query += "ho:end ?ev1_end;\n"
        query += "ho:hasLocation ?bed1.\n"
        query += "FILTER(?p_id in {})\n".format(self.idsPat)
        query += "FILTER(?p1_id in {})\n".format(self.idsPat)
        query += "FILTER(?p_id > ?p1_id)\n"
        query += "FILTER((?ev_start >= ?start && ?ev_end <= ?end)\n"
        query += "|| (?ev_start <= ?start && ?ev_end >= ?start)\n"
        query += "|| (?ev_start <= ?end && ?ev_end >= ?end))\n"
        query += "FILTER((?ev1_start >= ?start && ?ev1_end <= ?end)\n"
        query += "|| (?ev1_start <= ?start && ?ev1_end >= ?start)\n"
        query += "|| (?ev1_start <= ?end && ?ev1_end >= ?end))\n"
        query += "}\n"
        query += "}\n"
        query += "?bed1 ho:placedIn* ?mid.\n"
        query += "?mid ho:placedIn* ?midAux.\n"
        query += "?midAux (^ho:placedIn)+ ?mid2.\n"
        query += "?mid2 (^ho:placedIn)* ?bed.\n"
        query += "FILTER (!regex(str(?mid), \"http://www.semanticweb.org/spatiotemporalHospitalOntology#(Floor|Building)/.+\"))\n"
        query += "FILTER (!regex(str(?midAux), \"http://www.semanticweb.org/spatiotemporalHospitalOntology#(Floor|Building)/.+\"))\n"
        query += "} GROUP BY ?bed ?bed1\n"
        query += "}\n"
        query += "}"

        return query

	
	 
		 
		
